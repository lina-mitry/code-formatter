states:
  - state: 'DEFAULT'
    actions:
      - { input: 'f', transition: 'FOR1', command: 'AppendLexemeCommand' }
      - { input: 'i', transition: 'IF1', command: 'AppendLexemeCommand' }
      - { input: '(', transition: 'TERMINATED', command: 'OpenRoundBracketCommand' }
      - { input: ')', transition: 'TERMINATED', command: 'CloseRoundBracketCommand' }
      - { input: '{', transition: 'TERMINATED', command: 'OpenFiguredBracketCommand' }
      - { input: '}', transition: 'TERMINATED', command: 'CloseFiguredBracketCommand' }
      - { input: ';', transition: 'TERMINATED', command: 'SemicolonCommand' }
      - { input: '+', transition: 'TERMINATED', command: 'PlusSignCommand' }
      - { input: "\n", transition: 'TERMINATED', command: 'NewLineCommand' }
      - { input: '=', transition: 'TERMINATED', command: 'EqualSignCommand' }
      - { input: ',', transition: 'TERMINATED', command: 'CommaCommand' }
      - { input: '[', transition: 'TERMINATED', command: 'OpenSquareBracketCommand' }
      - { input: ']', transition: 'TERMINATED', command: 'CloseSquareBracketCommand' }
      - { input: '.', transition: 'TERMINATED', command: 'DotCommand' }
      - { input: ' ', transition: 'SPACING', command: 'SpacingCommand' }
      - { input: '"', transition: 'STRING_LITERALS', command: 'StringLiteralsCommand' }
      - { input: '/', transition: 'LINE_COMMENT1', command: 'AppendLexemeCommand' }
      - { input: null, transition: 'TEXT', command: 'TextCommand' }

  - state: 'FOR1'
    actions:
      - { input: 'o', transition: 'FOR2', command: 'AppendLexemeCommand' }
      - { input: ' ', transition: 'TERMINATED', command: 'PostponeCommand' }
      - { input: null, transition: 'TEXT', command: 'TextCommand' }

  - state: 'FOR2'
    actions:
      - { input: 'r', transition: 'FOR3', command: 'ForCommand' }
      - { input: ' ', transition: 'TERMINATED', command: 'PostponeCommand' }
      - { input: ';', transition: 'TERMINATED', command: 'PostponeCommand' }
      - { input: null, transition: 'TEXT', command: 'TextCommand' }

  - state: 'FOR3'
    actions:
      - { input: ' ', transition: 'TERMINATED', command: 'PostponeCommand' }
      - { input: '(', transition: 'TERMINATED', command: 'PostponeCommand' }
      - { input: null, transition: 'TEXT', command: 'TextCommand' }

  - state: 'TEXT'
    actions:
      - { input: ' ', transition: 'TERMINATED', command: 'PostponeCommand' }
      - { input: ';', transition: 'TERMINATED', command: 'PostponeCommand' }
      - { input: '(', transition: 'TERMINATED', command: 'PostponeCommand' }
      - { input: ')', transition: 'TERMINATED', command: 'PostponeCommand' }
      - { input: '{', transition: 'TERMINATED', command: 'PostponeCommand' }
      - { input: '}', transition: 'TERMINATED', command: 'PostponeCommand' }
      - { input: ',', transition: 'TERMINATED', command: 'PostponeCommand' }
      - { input: '=', transition: 'TERMINATED', command: 'PostponeCommand' }
      - { input: '+', transition: 'TERMINATED', command: 'PostponeCommand' }
      - { input: '[', transition: 'TERMINATED', command: 'PostponeCommand' }
      - { input: ']', transition: 'TERMINATED', command: 'PostponeCommand' }
      - { input: '.', transition: 'TERMINATED', command: 'PostponeCommand' }
      - { input: null, transition: 'TEXT', command: 'TextCommand' }

  - state: 'SPACING'
    actions:
      - { input: ' ', transition: 'SPACING', command: 'DoNothingCommand' }
      - { input: null, transition: 'TERMINATED', command: 'PostponeCommand' }

  - state: 'STRING_LITERALS'
    actions:
      - { input: '"', transition: 'TERMINATED', command: 'StringLiteralsCommand' }
      - { input: null, transition: 'STRING_LITERALS', command: 'StringLiteralsCommand' }

  - state: 'IF1'
    actions:
      - { input: 'f', transition: 'IF2', command: 'IfCommand' }
      - { input: ';', transition: 'TERMINATED', command: 'PostponeCommand' }
      - { input: ' ', transition: 'TERMINATED', command: 'PostponeCommand' }
      - { input: '+', transition: 'TERMINATED', command: 'PostponeCommand' }
      - { input: ',', transition: 'TERMINATED', command: 'PostponeCommand' }
      - { input: null, transition: 'TEXT', command: 'TextCommand' }

  - state: 'IF2'
    actions:
      - { input: ' ', transition: 'TERMINATED', command: 'PostponeCommand' }
      - { input: '(', transition: 'TERMINATED', command: 'PostponeCommand' }
      - { input: null, transition: 'TEXT', command: 'TextCommand' }

  - state: 'LINE_COMMENT1'
    actions:
      - { input: '/', transition: 'LINE_COMMENT', command: 'OneLineCommentCommand' }

  - state: 'LINE_COMMENT'
    actions:
      - { input: "\n", transition: 'TERMINATED', command: 'PostponeCommand' }
      - { input: null, transition: 'LINE_COMMENT', command: 'OneLineCommentCommand' }
